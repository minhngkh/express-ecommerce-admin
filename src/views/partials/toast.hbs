<template x-teleport="body">
  <div>
    <ul
      x-data="{
									toasts: [],
									toastsHovered: false,
									expanded: false,
									layout: 'default',
									position: 'top-center',
									paddingBetweenToasts: 15,
									deleteToastWithId (id){
											for(let i = 0; i < this.toasts.length; i++){
													if(this.toasts[i].id === id){
															this.toasts.splice(i, 1);
															break;
													}
											}
									},
									burnToast(id){
											burnToast = this.getToastWithId(id);
											burnToastElement = document.getElementById(burnToast.id);
											if(burnToastElement){
													if(this.toasts.length == 1){
															if(this.layout=='default'){
																	this.expanded = false;
															}
															burnToastElement.classList.remove('translate-y-0');
															if(this.position.includes('bottom')){
																	burnToastElement.classList.add('translate-y-full');
															} else {
																	burnToastElement.classList.add('-translate-y-full');
															}
															burnToastElement.classList.add('-translate-y-full');
													}
													burnToastElement.classList.add('opacity-0');
													let that = this;
													setTimeout(function(){
															that.deleteToastWithId(id);
															setTimeout(function(){
																	that.stackToasts();
															}, 1)
													}, 300);
											}
									},
									getToastWithId(id){
											for(let i = 0; i < this.toasts.length; i++){
													if(this.toasts[i].id === id){
															return this.toasts[i];
													}
											}
									},
									stackToasts(){
											this.positionToasts();
											this.calculateHeightOfToastsContainer();
											let that = this;
											setTimeout(function(){
													that.calculateHeightOfToastsContainer();
											}, 300);
									},
									positionToasts(){
											if(this.toasts.length == 0) return;
											let topToast = document.getElementById( this.toasts[0].id );
											topToast.style.zIndex = 100;
											if(this.expanded){
													if(this.position.includes('bottom')){
															topToast.style.top = 'auto';
															topToast.style.bottom = '0px';
													} else {
															topToast.style.top = '0px';
													}
											}
											let bottomPositionOfFirstToast = this.getBottomPositionOfElement(topToast);
											if(this.toasts.length == 1) return;
											let middleToast = document.getElementById( this.toasts[1].id );
											middleToast.style.zIndex = 90;
											if(this.expanded){
													middleToastPosition = topToast.getBoundingClientRect().height +
																									this.paddingBetweenToasts + 'px';
													if(this.position.includes('bottom')){
															middleToast.style.top = 'auto';
															middleToast.style.bottom = middleToastPosition;
													} else {
															middleToast.style.top = middleToastPosition;
													}
													middleToast.style.scale = '100%';
													middleToast.style.transform = 'translateY(0px)';
		
											} else {
													middleToast.style.scale = '94%';
													if(this.position.includes('bottom')){
															middleToast.style.transform = 'translateY(-16px)';
													} else {
															this.alignBottom(topToast, middleToast);
															middleToast.style.transform = 'translateY(16px)';
													}
											}
		
											if(this.toasts.length == 2) return;
											let bottomToast = document.getElementById( this.toasts[2].id );
											bottomToast.style.zIndex = 80;
											if(this.expanded){
													bottomToastPosition = topToast.getBoundingClientRect().height +
																									this.paddingBetweenToasts +
																									middleToast.getBoundingClientRect().height +
																									this.paddingBetweenToasts + 'px';
		
													if(this.position.includes('bottom')){
															bottomToast.style.top = 'auto';
															bottomToast.style.bottom = bottomToastPosition;
													} else {
															bottomToast.style.top = bottomToastPosition;
													}
													bottomToast.style.scale = '100%';
													bottomToast.style.transform = 'translateY(0px)';
											} else {
													bottomToast.style.scale = '88%';
													if(this.position.includes('bottom')){
															bottomToast.style.transform = 'translateY(-32px)';
													} else {
															this.alignBottom(topToast, bottomToast);
															bottomToast.style.transform = 'translateY(32px)';
													}
											}
		
											if(this.toasts.length == 3) return;
											let burnToast = document.getElementById( this.toasts[3].id );
											burnToast.style.zIndex = 70;
											if(this.expanded){
													burnToastPosition = topToast.getBoundingClientRect().height +
																									this.paddingBetweenToasts +
																									middleToast.getBoundingClientRect().height +
																									this.paddingBetweenToasts +
																									bottomToast.getBoundingClientRect().height +
																									this.paddingBetweenToasts + 'px';
		
													if(this.position.includes('bottom')){
															burnToast.style.top = 'auto';
															burnToast.style.bottom = burnToastPosition;
													} else {
															burnToast.style.top = burnToastPosition;
													}
													burnToast.style.scale = '100%';
													burnToast.style.transform = 'translateY(0px)';
											} else {
													burnToast.style.scale = '82%';
													this.alignBottom(topToast, burnToast);
													burnToast.style.transform = 'translateY(48px)';
											}
											burnToast.firstElementChild.classList.remove('opacity-100');
											burnToast.firstElementChild.classList.add('opacity-0');
											let that = this;
											// Burn ðŸ”¥ (remove) last toast
											setTimeout(function(){
															that.toasts.pop();
													}, 300);
											if(this.position.includes('bottom')){
															middleToast.style.top = 'auto';
											}
											return;
									},
									alignBottom(element1, element2) {
											// Get the top position and height of the first element
											let top1 = element1.offsetTop;
											let height1 = element1.offsetHeight;
											// Get the height of the second element
											let height2 = element2.offsetHeight;
											// Calculate the top position for the second element
											let top2 = top1 + (height1 - height2);
											// Apply the calculated top position to the second element
											element2.style.top = top2 + 'px';
									},
									alignTop(element1, element2) {
											// Get the top position of the first element
											let top1 = element1.offsetTop;
											// Apply the same top position to the second element
											element2.style.top = top1 + 'px';
									},
									resetBottom(){
											for(let i = 0; i < this.toasts.length; i++){
													if(document.getElementById( this.toasts[i].id )){
															let toastElement = document.getElementById( this.toasts[i].id );
															toastElement.style.bottom = '0px';
													}
											}
									},
									resetTop(){
											for(let i = 0; i < this.toasts.length; i++){
													if(document.getElementById( this.toasts[i].id )){
															let toastElement = document.getElementById( this.toasts[i].id );
															toastElement.style.top = '0px';
													}
											}
									},
									getBottomPositionOfElement(el){
											return (el.getBoundingClientRect().height + el.getBoundingClientRect().top);
									},
									calculateHeightOfToastsContainer(){
											if(this.toasts.length == 0){
													$el.style.height = '0px';
													return;
											}
											lastToast = this.toasts[this.toasts.length - 1];
											lastToastRectangle = document.getElementById(lastToast.id).getBoundingClientRect();
		
											firstToast = this.toasts[0];
											firstToastRectangle = document.getElementById(firstToast.id).getBoundingClientRect();
											if(this.toastsHovered){
													if(this.position.includes('bottom')){
															$el.style.height = ((firstToastRectangle.top + firstToastRectangle.height) - lastToastRectangle.top) + 'px';
													} else {
															$el.style.height = ((lastToastRectangle.top + lastToastRectangle.height) - firstToastRectangle.top) + 'px';
													}
											} else {
													$el.style.height = firstToastRectangle.height + 'px';
											}
									}
							}"
      @set-toasts-layout.window="
									layout=event.detail.layout;
									if(layout == 'expanded'){
											expanded=true;
									} else {
											expanded=false;
									}
									stackToasts();
							"
      @toast-show.window="
									event.stopPropagation();
									if(event.detail.position){
											position = event.detail.position;
									}
									toasts.unshift({
											id: 'toast-' + Math.random().toString(16).slice(2),
											show: false,
											message: event.detail.message,
											description: event.detail.description,
											type: event.detail.type,
											html: event.detail.html
									});
							"
      @mouseenter="toastsHovered=true;"
      @mouseleave="toastsHovered=false"
      x-init="
									if(layout == 'expanded'){
											expanded = true;
									}
									stackToasts();
									$watch('toastsHovered', function(value){
											if(layout == 'default'){
													if(position.includes('bottom')){
															resetBottom();
													} else {
															resetTop();
													}
													if(value){
															// calculate the new positions
															expanded = true;
															if(layout == 'default'){
																	stackToasts();
															}
													} else {
															if(layout == 'default'){
																	expanded = false;
																	//setTimeout(function(){
																	stackToasts();
															//}, 10);
																	setTimeout(function(){
																			stackToasts();
																	}, 10)
															}
													}
											}
									});
							"
      class="group fixed z-[99] block w-full sm:max-w-xs"
      :class="{ 'right-0 top-0 sm:mt-6 sm:mr-6': position=='top-right', 'left-0 top-0 sm:mt-6 sm:ml-6': position=='top-left', 'left-1/2 -translate-x-1/2 top-0 sm:mt-6': position=='top-center', 'right-0 bottom-0 sm:mr-6 sm:mb-6': position=='bottom-right', 'left-0 bottom-0 sm:ml-6 sm:mb-6': position=='bottom-left', 'left-1/2 -translate-x-1/2 bottom-0 sm:mb-6': position=='bottom-center' }"
      x-cloak
    >
      <template x-for="(toast, index) in toasts" :key="toast.id">
        <li
          :id="toast.id"
          x-data="{
													toastHovered: false
											}"
          x-init="
		
													if(position.includes('bottom')){
															$el.firstElementChild.classList.add('toast-bottom');
															$el.firstElementChild.classList.add('opacity-0', 'translate-y-full');
													} else {
															$el.firstElementChild.classList.add('opacity-0', '-translate-y-full');
													}
													setTimeout(function(){
		
															setTimeout(function(){
																	if(position.includes('bottom')){
																			$el.firstElementChild.classList.remove('opacity-0', 'translate-y-full');
																	} else {
																			$el.firstElementChild.classList.remove('opacity-0', '-translate-y-full');
																	}
																	$el.firstElementChild.classList.add('opacity-100', 'translate-y-0');
																	setTimeout(function(){
																			stackToasts();
																	}, 10);
															}, 5);
													}, 50);
		
													setTimeout(function(){
															setTimeout(function(){
																	$el.firstElementChild.classList.remove('opacity-100');
																	$el.firstElementChild.classList.add('opacity-0');
																	if(toasts.length == 1){
																			$el.firstElementChild.classList.remove('translate-y-0');
																			$el.firstElementChild.classList.add('-translate-y-full');
																	}
																	setTimeout(function(){
																			deleteToastWithId(toast.id)
																	}, 300);
															}, 5);
													}, 4000);
											"
          @mouseover="toastHovered=true"
          @mouseout="toastHovered=false"
          class="absolute w-full select-none duration-300 ease-out sm:max-w-xs"
          :class="{ 'toast-no-description': !toast.description }"
        >
          <span
            class="group relative flex w-full flex-col items-start border border-gray-100 bg-white shadow-[0_5px_15px_-3px_rgb(0_0_0_/_0.1)] transition-all duration-300 ease-out sm:max-w-xs sm:rounded-xl"
            :class="{ 'p-4' : !toast.html, 'p-0' : toast.html }"
          >
            <template x-if="!toast.html">
              <div class="flex">
                <div class="flex-shrink-0">
                  <svg
                    x-show="toast.type == 'info'"
                    class="mt-0.5 h-4 w-4 flex-shrink-0 text-blue-500"
                    xmlns="http://www.w3.org/2000/svg"
                    width="16"
                    height="16"
                    fill="currentColor"
                    viewBox="0 0 16 16"
                  >
                    <path
                      d="M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16zm.93-9.412-1 4.705c-.07.34.029.533.304.533.194 0 .487-.07.686-.246l-.088.416c-.287.346-.92.598-1.465.598-.703 0-1.002-.422-.808-1.319l.738-3.468c.064-.293.006-.399-.287-.47l-.451-.081.082-.381 2.29-.287zM8 5.5a1 1 0 1 1 0-2 1 1 0 0 1 0 2z"
                    />
                  </svg>
                  <svg
                    x-show="toast.type == 'success'"
                    class="mt-0.5 h-4 w-4 flex-shrink-0 text-teal-500"
                    xmlns="http://www.w3.org/2000/svg"
                    width="16"
                    height="16"
                    fill="currentColor"
                    viewBox="0 0 16 16"
                  >
                    <path
                      d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-3.97-3.03a.75.75 0 0 0-1.08.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-.01-1.05z"
                    />
                  </svg>
                  <svg
                    x-show="toast.type == 'danger'"
                    class="mt-0.5 h-4 w-4 flex-shrink-0 text-red-500"
                    xmlns="http://www.w3.org/2000/svg"
                    width="16"
                    height="16"
                    fill="currentColor"
                    viewBox="0 0 16 16"
                  >
                    <path
                      d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zM5.354 4.646a.5.5 0 1 0-.708.708L7.293 8l-2.647 2.646a.5.5 0 0 0 .708.708L8 8.707l2.646 2.647a.5.5 0 0 0 .708-.708L8.707 8l2.647-2.646a.5.5 0 0 0-.708-.708L8 7.293 5.354 4.646z"
                    />
                  </svg>
                  <svg
                    x-show="toast.type == 'warning'"
                    class="mt-0.5 h-4 w-4 flex-shrink-0 text-yellow-500"
                    xmlns="http://www.w3.org/2000/svg"
                    width="16"
                    height="16"
                    fill="currentColor"
                    viewBox="0 0 16 16"
                  >
                    <path
                      d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zM8 4a.905.905 0 0 0-.9.995l.35 3.507a.552.552 0 0 0 1.1 0l.35-3.507A.905.905 0 0 0 8 4zm.002 6a1 1 0 1 0 0 2 1 1 0 0 0 0-2z"
                    />
                  </svg>
                </div>
                <div class="mx-3">
                  <p
                    x-text="toast.message"
                    class="text-sm text-gray-700 dark:text-gray-400"
                  >
                  </p>
                </div>
              </div>
            </template>
            <template x-if="toast.html">
              <div x-html="toast.html"></div>
            </template>
            <span
              @click="burnToast(toast.id)"
              class="absolute right-0 mr-2.5 cursor-pointer rounded-full p-1.5 text-gray-400 opacity-0 duration-100 ease-in-out hover:bg-gray-50 hover:text-gray-500"
              :class="{ 'top-1/2 -translate-y-1/2' : !toast.description && !toast.html, 'top-0 mt-2.5' : (toast.description || toast.html), 'opacity-100' : toastHovered, 'opacity-0' : !toastHovered }"
            >
              <svg
                class="h-3 w-3"
                fill="currentColor"
                viewBox="0 0 20 20"
                xmlns="http://www.w3.org/2000/svg"
              ><path
                  fill-rule="evenodd"
                  d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z"
                  clip-rule="evenodd"
                ></path></svg>
            </span>
          </span>
        </li>
      </template>
    </ul>
  </div>
</template>